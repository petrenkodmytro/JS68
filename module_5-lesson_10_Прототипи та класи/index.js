console.log("# –ú–æ–¥—É–ª—å 5. –ó–∞–Ω—è—Ç—Ç—è 10. –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏ —Ç–∞ –∫–ª–∞—Å–∏");

// –ö–∞—Ö—É—Ç

// class Animal {
//   #privateProp = 'Secure';
//   #printPrivateMessage() {
//     console.log('private message')
//   }

//   static printMessage() {
//     console.log('static method')
//   }

//   constructor(name) {
//     // this = {} // imlicitly

//     this.name = name
//     //....

//     // return this // implicitly
//   }

//   printHello() {
//     console.log(this.name + ' hello')
//   }
// }

// const rabbit = new Animal('Bunny');
// rabbit.printMessage()

// Animal.printMessage()

// ## Example 1 - –ë–ª–æ–≥–µ—Ä

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Blogger` –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:

// - `email` - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// - `age` - –≤—ñ–∫, —á–∏—Å–ª–æ
// - `numberOfPosts` - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// - `topics` - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä

// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ `getInfo()`, —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫:
// `User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts`.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ `updatePostCount(value)`, —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ `value` –ø—Ä–∏–π–º–∞—î
// –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.

// 1. —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞—Å –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —ñ –æ–± º—î–∫—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
class Blogger {
  constructor({ email, age, numberOfPosts, topics } = {}) {
    this.email = email;
    this.age = age;
    this.numberOfPosts = numberOfPosts;
    this.topics = topics;
  }

  staticgetInfo() {
    return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts`;
  }

  updatePostCount(value) {
    this.numberOfPosts += value;
  }
}

const blogger = new Blogger({
  email: "mango@mail.com",
  age: 24,
  numberOfPosts: 20,
  topics: ["tech", "cooking"],
});

// console.log(blogger)

// console.log(blogger.getInfo());
// blogger.updatePostCount(10);
// console.log(blogger.getInfo());

// ```js
// const mango = new User({
//   name: 'mango@mail.com',
//   age: 24,
//   numberOfPosts: 20,
//   topics: ['tech', 'cooking'],
// });
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

const poly = new Blogger({
  email: "poly@mail.com",
  age: 19,
  numberOfPosts: 17,
  topics: ["sports", "gaming", "health"],
});
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts
// ```

// ## Example 2 - –°—Ö–æ–≤–∏—â–µ

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Storage` —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤.
// –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ
// –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `items`.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:

// - `getItems()` - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// - `addItem(item)` - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// - `removeItem(item)` - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.

class Storage {
  constructor(goods) {
    this._items = goods;
  }

  getItems() {
    return this._items;
  }

  addItem(item) {
    this._items.push(item);
  }

  removeItem(item) {
    const index = this._items.indexOf(item);

    if (index > -1) {
      this._items.splice(index, 1);
    }
  }
}

// // ```js
// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);
// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem('üçå');
// // console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem('üçã');
// console.table(storage.getItems()); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]
// // ```

// const courses = new Storage(['html', 'css', 'js', 'node']);
// console.table(courses.getItems())

// ## Example 3 - User

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `User` —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ `login` —Ç–∞ `email`.
// –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `#login` —Ç–∞ `#email`, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑
// –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä `login` —Ç–∞ `email`.

const permission = true;

// class User {
//   #login;
//   #email;

//   constructor({ login, email }) {
//     this.#login = login;
//     this.#email = email;
//   }

//   get login() {
//     if (permission) {
//       return this.#login;
//     }

//     return "–Ω—î—î—î—î)";
//   }

//   set login(value) {
//     if (value.length < 5) {
//       this.#login = value;
//     }
//   }
// }

// ```js
// const mango = new User({
//   login: "Mango",
//   email: "mango@dog.woof",
// });

// console.log(mango.login); // Mango
// mango.login = 'dodo';
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });

// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie
// ```

// ## Example 4 - –ù–æ—Ç–∞—Ç–∫–∏

// EXAMPLE items = [
//   {
//     text: 'asdsadsa',
//     priority: 'LOW'
//   },
//   {
//     text: 'asdsadsa',
//     priority: 'LOW'
//   }
// ]

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å `Notes` —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `items`.
// –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ `text` —Ç–∞ `priority`. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É
// –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `Priority`, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

class Notes {
  static defaultText = "ororororoor oro ro or o";
  static Priority = {
    LOW: "low",
    NORMAL: "normal",
    HIGH: "high",
  };

  constructor() {
    this.items = [];
  }

  addNote(note) {
    this.items.push(note);
  }

  removeNote(text) {
    const index = this.items.findIndex((el) => el.text === text);
    this.items.splice(index, 1);
  }
}

// ```js
// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// ```

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ `addNote(note)`, `removeNote(text)` —Ç–∞
// `updatePriority(text, newPriority)`.

// ```js
const myNotes = new Notes();
// console.log(myNotes);

myNotes.addNote({
  text: Notes.defaultText,
  priority: Notes.Priority.LOW,
});

// console.log(myNotes.items);

myNotes.addNote({
  text: "–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞",
  priority: Notes.Priority.NORMAL,
});
// console.log(myNotes.items);

// myNotes.removeNote("–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞");
// console.log(myNotes.items);

// myNotes.updateNote('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);
// ```

// ## Example 5 - Toggle

// –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å `Toggle` —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å `{isOpen: boolean}` —ñ
// –æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `on` - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
// –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `on` –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ `false`.

class Toggle {
  constructor({ isOpen = false } = {}) {
    this.on = isOpen;
  }

  toggle() {
    this.on = !this.on;
  }
}

// ```js
// const firstToggle = new Toggle({ isOpen: true });
// console.group("firstToggle");
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// console.groupEnd("firstToggle");

// const secondToggle = new Toggle();
// console.group("secondToggle");
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// console.groupEnd("secondToggle");

// –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç

// –ï—Å–ª–∏ –≤ Object.create –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å null –≤ –∫–∞—á–µ—Å—Ç–≤–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ç–æ —Å–æ–∑–¥–∞—Å—Ç—Å—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç.

// Object.create —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–ª–∏—á–Ω–æ–π —É—Ç–∏–ª–∏—Ç–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤. –û–±—ä–µ–∫—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Object.create, –∏–º–µ—é—Ç proto –∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å. –ß—Ç–æ –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –ø–æ–¥–≤–µ—Ä–∂–µ–Ω –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º –∏–∑–≤–Ω–µ? –ú—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å Object.create(null):

// –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º —Å –ø–æ–º–æ—â—å—é {}, –Ω–æ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –≤—Å—ë –µ—â—ë –∏–º–µ–µ—Ç proto, hasOwnProperty –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞. –û–¥–Ω–∞–∫–æ, –µ—Å—Ç—å —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞—Ç—å —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç:

// const dict = Object.create(null);

class StringBuilder {
  constructor(initialValue) {
    this.value = initialValue;
  }
  getValue() {
    return this.value;
  }
  padEnd(str) {
    return (this.value = this.value + str);
  }
  padStart(str) {
    return (this.value = str + this.value);
  }
  padBoth(str) {
    return (this.value = str + this.value + str);
  }
}

// Change code above this line
// const builder = new StringBuilder(".");
// console.log(builder.getValue()); // "."
// builder.padStart("^");
// console.log(builder.getValue()); // "^."
// builder.padEnd("^");
// console.log(builder.getValue()); // "^.^"
// builder.padBoth("=");
// console.log(builder.getValue()); // "=^.^="
// console.log(typeof(builder.getValue()));

//4/12
// class User {
//   // –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
//   name;
//   // –û–±–æ–≤'—è–∑–∫–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
//   #email;

//   constructor({ name, email }) {
//     this.name = name;
//     this.#email = email;
//   }

//   getEmail() {
//     return this.#email;
//   }

//   changeEmail(newEmail) {
//     this.#email = newEmail;
//   }
// }

// const mango = new User({
//   name: "Mango",
//   email: "mango@mail.com",
// });
// mango.changeEmail("mango@supermail.com");
// console.log(mango)
// console.log(mango.getEmail()); // mango@supermail.com
// console.log(mango.#email); // –í–∏–Ω–∏–∫–Ω–µ –ø–æ–º–∏–ª–∫–∞, —Ü–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å

// class Car {
//–Ü–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è ‚Äî —Ü–µ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—è, —â–æ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ç–µ, —è–∫ –≤–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–ª–∞—Å. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª–∞—Å—É –ø–æ–≤–∏–Ω–µ–Ω –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–æ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É - –Ω–∞–±–æ—Ä—É –ø—É–±–ª—ñ—á–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π —ñ –º–µ—Ç–æ–¥—ñ–≤ –∫–ª–∞—Å—É. –†–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ —ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π (–Ω–µ –ø—É–±–ª—ñ—á–Ω–∏—Ö) –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.
//–í –∫–ª–∞—Å–∞—Ö —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è —Ä–µ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏–≤–∞—Ç–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–ª–∞—Å—É.

//–ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –ø–æ—à—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é –¥–ª—è –ø—Ä—è–º–æ—ó –∑–º—ñ–Ω–∏ –∑–æ–≤–Ω—ñ, —Ç–æ–±—Ç–æ - –ø—Ä–∏–≤–∞—Ç–Ω–æ—é. –î–æ–¥–∞—é—á–∏ –¥–æ —ñ–º–µ–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª #, –º–∏ —Ä–æ–±–∏–º–æ —ó—ó –ø—Ä–∏–≤–∞—Ç–Ω–æ—é. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –¥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ - –æ–±–æ–≤'—è–∑–∫–æ–≤–µ.
//   #brand;
//   constructor({ brand, model, price }) {
//     this.#brand = brand;
//     this.model = model;
//     this.price = price;
//   }
//   getBrand() {
//     return this.#brand;
//   }
//   changeBrand(newBrand) {
//     this.#brand = newBrand;
//   }
// }

// console.log(new Car({ brand: "Audi", model: "Q3", price: 36000 }));
// const audi = new Car({ brand: "Audi", model: "Q3", price: 36000 });
// console.log(audi);

class UserA {
  #email;

  constructor({ name, email }) {
    this.name = name;
    this.#email = email;
  }

  // –ì–µ—Ç—Ç–µ—Ä email
  // –ì–µ—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç–µ—Ä–∏ ‚Äî —Ü–µ –∫–æ—Ä–æ—Ç—à–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏. –ì–µ—Ç—Ç–µ—Ä —ñ —Å–µ—Ç–µ—Ä —ñ–º—ñ—Ç—É—é—Ç—å –∑–≤–∏—á–∞–π–Ω—É –ø—É–±–ª—ñ—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –∫–ª–∞—Å—É, –∞–ª–µ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —ñ–Ω—à—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑—Ä—É—á–Ω—ñ—à–∏–º —Å–ø–æ—Å–æ–±–æ–º. –ì–µ—Ç—Ç–µ—Ä –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ, –∞ —Å–µ—Ç–µ—Ä - –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –π–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏.

  // –ì–µ—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç–µ—Ä–∏ –¥–æ—Ä–µ—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π —á–∏—Ç–∞–Ω–Ω—è —ñ –∑–º—ñ–Ω–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π, –æ—Å–æ–±–ª–∏–≤–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö, —è–∫ —ó—Ö –ø—É–±–ª—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –º–∞—Å–∏–≤ –∞–±–æ –æ–±'—î–∫—Ç, –≤–æ–Ω–∏ –Ω–µ –ø—ñ–¥—ñ–π–¥—É—Ç—å.
  get email() {
    return this.#email;
  }

  // –°–µ—Ç—Ç–µ—Ä email
  set email(newEmail) {
    this.#email = newEmail;
  }
}
const mang = new UserA({ name: "Mango", email: "mango@mail.com" });
// console.log(mang.email); // mango@mail.com
mang.email = "mango@supermail.com";
// console.log(mang.email); // mango@supermail.com
// console.log(mang.get);

class Car {
  #price;
  //–ö—Ä—ñ–º –ø—É–±–ª—ñ—á–Ω–∏—Ö —ñ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞, –≤ –∫–ª–∞—Å—ñ –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—Å–∏—Ç–∏ –π–æ–≥–æ –≤–ª–∞—Å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ, –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –∫–ª–∞—Å–æ–≤—ñ, –∞–ª–µ –Ω–µ –π–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞–º - —Å—Ç–∞—Ç–∏—á–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ (static). –í–æ–Ω–∏ –∫–æ—Ä–∏—Å–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–ª–∞—Å—É.
  static MAX_PRICE = 50000;
  constructor({ price }) {
    this.#price = price;
  }

  get price() {
    return this.#price;
  }

  set price(newPrice) {
    if (newPrice <= Car.MAX_PRICE) {
      this.#price = newPrice;
    }
    return;
  }
}

const audi = new Car({ price: 35000 });
// console.log(audi);
// console.log(audi.price); // 35000

audi.price = 49000;
// console.log(audi.price); // 49000

audi.price = 51000;
// console.log(audi.price); // 49000

//5/12
// class UserB {
//   static #takenEmails = [];

//   static isEmailTaken(email) {
//     return UserB.#takenEmails.includes(email);
//   }

//   #email;

//   constructor({ email }) {
//     this.#email = email;
//     UserB.#takenEmails.push(email);
//     console.log(UserB.#takenEmails);
//   }

// }

// const mango1 = new UserB({ email: "mango@mail.com" });
// console.log(mango1);

// console.log(UserB.isEmailTaken("poly@mail.com"));
// console.log(UserB.isEmailTaken("mango@mail.com"));

// 5/20
class User {
  email;

  constructor(email) {
    this.email = email;
  }

  get email() {
    return this.email;
  }

  set email(newEmail) {
    this.email = newEmail;
  }
}
class Admin extends User {
  // Change code below this line

  static AccessLevel = {
    BASIC: "basic",
    SUPERUSER: "superuser",
  };

  constructor({ email, accessLevel, blacklistedEmails = [] }) {
    super(email);
    this.accessLevel = accessLevel;
    this.blacklistedEmails = blacklistedEmails;
  }
  blacklist(email) {
    this.blacklistedEmails.push(email);
  }
  isBlacklisted(email) {
    return this.blacklistedEmails.includes(email);
  }
  // Change code above this line
}

const mangor = new Admin({
  email: "mango@mail.com",
  accessLevel: Admin.AccessLevel.SUPERUSER,
});

// console.log(mangor.email); // "mango@mail.com"
// console.log(mangor.accessLevel); // "superuser"

// mangor.blacklist("poly@mail.com");
// console.log(mangor.blacklistedEmails); // ["poly@mail.com"]
// console.log(mangor.isBlacklisted("mango@mail.com")); // false
// console.log(mangor.isBlacklisted("poly@mail.com")); // true

// set-–∫–æ–ª–µ–∫—Ü—ã–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è)
const arryNumber = [...new Set([3, 1, 2, 3, 4])];
console.log(new Set([3, 1, 2, 3, 4]));
console.log(arryNumber.length, arryNumber[2]);

console.log("–ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. forEach");

/** –ü—Ä–∏–∫–ª–∞–¥–∏ –∑ –∫–∞—Ö—É—Ç—É */

// function foo (fn) {
//   fn()
// }

// function logger(message) {
//   console.log(arguments)
//   return true;
// }
// console.log(logger("z"));

// const logger = message => {
//   console.log(arguments)
//   return message
// }

// const logger = (a, b) => a + b
// const logger = (message, a) => message;
// const logger = (a, b) => {
//   return a + b
// }

// foo(logger)
// logger()

// ## Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// - `createProduct(obj, callback)` - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂
//   –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É
//   –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `id` —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// - `logProduct(product)` - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤
//   –∫–æ–Ω—Å–æ–ª—å
// - `logTotalPrice(product)` - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É
//   –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

/**
 * 1. –î–æ–¥–∞—Ç–∏ –¥–æ –æ–± º—î–∫—Ç–∞ ID
 * 2. –ü–µ—Ä–µ–¥–∞—Ç–∏ –æ–± º—î–∫—Ç –≤ –∫–æ–ª–±–µ–∫
 */
function createProduct(obj, callback) {
  const object = {
    ...obj,
    id: Date.now(),
  };

  callback(object);
}

function logProduct(product) {
  // console.log(product)
}

function logTotalPrice(product) {
  // console.log(product.price * product.quantity)
}

function doubleQuantity({ quantity }) {
  // console.log(quantity * 2)
}

const product = { name: "Tomato", price: 10, quantity: 43 };
createProduct(product, doubleQuantity);

createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);
createProduct({ name: "Tomato", price: 10, quantity: 43 }, logTotalPrice);

// ## Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –î–æ–¥–∞–π—Ç–µ –≤ –æ–±'—î–∫—Ç `account` –º–µ—Ç–æ–¥–∏ `withdraw(amount, onSuccess, onError)` —Ç–∞
// `deposit(amount, onSuccess, onError)`, –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞
// –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ `withdraw` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ
// this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –ú–µ—Ç–æ–¥ `deposit` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ
// –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// ```js
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT || amount > this.balance) {
//       onError({
//         message: "—Å—Ç–∞–ª–∞—Å—å –±—ñ–¥–∞. –õ—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∞–±–æ –≥—Ä–æ—à–µ–π –Ω–µ–º–∞",
//         status: "ERROR"
//       })
//     } else {
//       onSuccess({
//         status: "OK",
//         message: "–û–ø–µ—Ä–∞—Ü—ñ—è withdraw —É—Å–ø—ñ—à–Ω–∞"
//       })
//     }
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount <= 0 || amount > TRANSACTION_LIMIT) {
//       onError({
//         message: "Deposit –Ω–µ –≤–¥–∞–≤—Å—è. –ë–æ —Å—É–º–∞ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—å. –ê–±–æ –ª—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ",
//         status: "ERROR DEPOSIT"
//       })
//     } else {
//       onSuccess({
//         message: '–í—Å–µ –≥—É–¥'
//       })
//     }
//   }
// };

// function handleSuccess({message, status = "OK"}) {
//   console.log(`${status}: ${message}`)
// }

// function handleError({message, status}) {
//   console.log(`${status}: ${message}`)
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);
// ```

// ## Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é `each(array, callback)`, —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î
// –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
// –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
// –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

/**
 * 1. —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—É—Å—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π –º–∞—Å–∏–≤
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ü–∏–∫–ª –ø–æ –º–∞—Å–∏–≤—É.
 * 3. –í–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–ª–±–µ–∫ –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó—ó —Ü–∏–∫–ª—É. –ü–µ—Ä–µ–¥–∞–≤—à–∏ –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
 * 4. –î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–±–µ–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π –º–∞—Å–∏–≤
 * 5. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π –º–∞—Å–∏–≤
 */

// function each(array, callback) {
//   const result = [];

//   for(let element of array) {
//     //1
//     // const el = callback(element);
//     // result.push(el)

//     //2
//     result.push(callback(element))
//   }

//   return result
// }

// ```js

// const numbers = [64, 49, 36, 25, 16];

// const newNumbers = each(numbers, function (value) {
//   return value * 2;
// });

// console.log(newNumbers)

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value * 2;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );

// const users = [{
//   name: "artem",
//   age: 30
// }];

// const res = each(users, function (user) {
//   return {
//     ...user,
//     name: user.name.toUpperCase()
//   }
// });

// console.log(res)

// ```

// ## Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// ```js

const fnName = (arg) => {
  return "a";
};

// const createProduct = (partialProduct, callback) => {
//   const product = { id: Date.now(), ...partialProduct };
//   callback(product);
// }

// function logProduct(product) {
//   console.log(product);
// }
// =
// const logProduct = product => console.log(product)

// function logTotalPrice(product) {
//   console.log(product.price * product.quantity);
// }
//=
// const logTotalPrice = product => console.log(product.price * product.quantity)

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);
// ```

// ## Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// ```js
const TRANSACTION_LIMIT = 1000;

const account = {
  username: "Jacob",
  balance: 400,
  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else if (amount > this.balance) {
      onError(`Amount can't exceed account balance of ${this.balance} credits`);
    } else {
      this.balance -= amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else if (amount <= 0) {
      onError(`Amount must be more than 0 credits`);
    } else {
      this.balance += amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
};

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// const handleSuccess = message => console.log(`‚úÖ Success! ${message}`);
// const handleError = message => console.log(`‚ùå Error! ${message}`);

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);
// ```

// ## Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// ```js
function each(array, callback) {
  const newArr = [];
  for (const el of array) {
    newArr.push(callback(el));
  }
  return newArr;
}

// console.log(
//   each([64, 49, 36, 25, 16], value => value * 2),
// );
// console.log(
//   each([64, 49, 36, 25, 16], value => value - 10),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );

// const res = each(users, user => {
//   return {
//     ...user,
//     name: user.name.toUpperCase()
//   }
// });
//==
// const users = [{
//   name: "artem",
//   age: 30
// }];

// console.log(each(users, user => ({
//     ...user,
//     name: user.name.toUpperCase()
//   })
// ))

// ```

// ## Example 7 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
function logItems(items) {
  console.log(items);

  //1
  // const fn = (item, index) => {
  //   console.log(`${index + 1} - ${item}`);
  // }
  // items.forEach(fn)

  //2
  items.forEach((el) => console.log(el));

  // for (let i = 0; i < items.length; i += 1) {
  //   console.log(`${i + 1} - ${items[i]}`);
  // }
}

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);
// ```

// ## Example 8 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
function printContactsInfo({ names, phones }) {
  const nameList = names.split(",");
  const phoneList = phones.split(",");

  nameList.forEach((name, i) => {
    // console.log(`${name}: ${phoneList[i]}`);
    console.log(`${nameList[i]}: ${phoneList[i]}`);
  });

  // for (let i = 0; i < nameList.length; i += 1) {
  //   console.log(`${nameList[i]}: ${phoneList[i]}`);
  // }
}

// [{
//   name: "user",
//   age: 123
// }].forEach(({age}) => console.log(age))

// printContactsInfo({
//   names: 'Jacob,William,Solomon,Artemis',
//   phones: '89001234567,89001112233,890055566377,890055566300',
// });
// ```

// ## Example 9 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
function cal—ÅulateAverage(...args) {
  let total = 0;

  args.forEach((arg) => (total += arg));

  // for (let i = 0; i < args.length; i++) {
  //   total += args[i];
  // }

  return total / args.length;
}

// console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
// console.log(cal—ÅulateAverage(14, 8, 2)); // 8
// console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2
// ```

function getCommonElements(firstArray, secondArray) {
  const commonElements = [];
  // Change code below this line
  // for (let i = 0; i < firstArray.length; i += 1) {
  //   if (secondArray.includes(firstArray[i])) {
  //     commonElements.push(firstArray[i]);
  //   }
  // }
  firstArray.forEach(function (element) {
    if (secondArray.includes(element)) {
      commonElements.push(element);
    }
  });

  return commonElements;
  // Change code above this line
}
// getCommonElements([1, 2, 3], [2, 4]);
// console.log(getCommonElements([1, 2, 3], [2, 4]));

// –§—É–Ω–∫—Ü—ñ—è changeEven(numbers, value) –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —ñ –æ–Ω–æ–≤–ª—é—î –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ–≥–æ - —Ü–µ –ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ, –¥–æ–¥–∞—é—á–∏ –¥–æ –Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ value. –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ —Å—Ç–∞–ª–∞ —á–∏—Å—Ç–æ—é - –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–∞ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers, –∞ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∞, –Ω–∞–ø–æ–≤–Ω—é–≤–∞–ª–∞ —ñ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏.
function changeEven(numbers, value) {
  const newArray = [];
  for (let i = 0; i < numbers.length; i += 1) {
    if (numbers[i] % 2 === 0) {
      newArray.push(numbers[i] + value);
      console.log(numbers[i]);
    } else {
      newArray.push(numbers[i]);
      console.log(numbers[i]);
    }
  }
  return newArray;
}
// console.log(changeEven([2, 8, 3, 7, 4, 6], 10));

const numbers = [5, 10, 15, 20, 25];

// –ö–ª–∞—Å–∏—á–Ω–∏–π for
// for (let i = 0; i < numbers.length; i += 1) {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${i}, –∑–Ω–∞—á–µ–Ω–Ω—è ${numbers[i]}`);
// }

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è forEach
numbers.forEach(function (number, index, array) {
  // console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
  // console.log(array);
});

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è map
// const students = [
//   { name: "–ú–∞–Ω–≥–æ", score: 83 },
//   { name: "–ü–æ–ª—ñ", score: 59 },
//   { name: "–ê—è–∫—Å", score: 37 },
//   { name: "–ö—ñ–≤—ñ", score: 94 },
//   { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
// ];

// const names = students.map((student) => {
//   return student.name;
// });
// console.log(names);

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è flatMap
// const students = [
//   { name: "–ú–∞–Ω–≥–æ", courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ—ñ–∑–∏–∫–∞"] },
//   { name: "–ü–æ–ª—ñ", courses: ["—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
//   { name: "–ö—ñ–≤—ñ", courses: ["—Ñ—ñ–∑–∏–∫–∞", "–±—ñ–æ–ª–æ–≥—ñ—è"] },
// ];

// const allCourses = students.flatMap(student => student.courses);
// console.log(allCourses);
// ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏–∫–∞', '—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏–∫–∞', '–±—ñ–æ–ª–æ–≥—ñ—è'];

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è filter
// const uniqueCourses = allCourses.filter((course, index, array) => {
//   console.log(array);
//   console.log(array.indexOf(course) === index);
//   return array.indexOf(course) === index
// });

// console.log(uniqueCourses);

// const LOW_SCORE = 50;
// const HIGH_SCORE = 80;
// const students = [
//   { name: "–ú–∞–Ω–≥–æ", score: 83 },
//   { name: "–ü–æ–ª—ñ", score: 59 },
//   { name: "–ê—è–∫—Å", score: 37 },
//   { name: "–ö—ñ–≤—ñ", score: 94 },
//   { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
// ];

// const best = students.filter((student) => student.score >= HIGH_SCORE);
// console.log(best); // –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ —ñ–º–µ–Ω–∞–º–∏ –ú–∞–Ω–≥–æ —ñ –ö—ñ–≤—ñ

// const worst = students.filter((student) => student.score < LOW_SCORE);
// console.log(worst); // –ú–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º –æ–±'—î–∫—Ç–æ–º –ê—è–∫—Å

// –í –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó –∑—Ä—É—á–Ω–æ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑—É–≤–∞—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±'—î–∫—Ç–∞
// const average = students.filter((student) => student.score >= LOW_SCORE && student.score < HIGH_SCORE);
// console.log(average);

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è find
// const colorPickerOptions = [
//   { label: "red", color: "#F44336" },
//   { label: "green", color: "#4CAF50" },
//   { label: "blue", color: "#2196F3" },
//   { label: "pink", color: "#E91E63" },
//   { label: "indigo", color: "#3F51B5" },
// ];

// colorPickerOptions.find((option) => option.label === "blue"); // { label: 'blue', color: '#2196F3' }
// colorPickerOptions.find((option) => option.label === "pink"); // { label: 'pink', color: '#E91E63' }
// colorPickerOptions.find((option) => option.label === "white"); // undefined

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è findIndex
// const colorPickerOptions = [
//   { label: "red", color: "#F44336" },
//   { label: "green", color: "#4CAF50" },
//   { label: "blue", color: "#2196F3" },
//   { label: "pink", color: "#E91E63" },
//   { label: "indigo", color: "#3F51B5" },
// ];

// colorPickerOptions.findIndex((option) => option.label === "blue"); // 2
// colorPickerOptions.findIndex((option) => option.label === "pink"); // 3
// colorPickerOptions.findIndex((option) => option.label === "white"); // -1

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è reduce
// const tweets = [
//   { id: "000", likes: 5, tags: ["js", "nodejs"] },
//   { id: "001", likes: 2, tags: ["html", "css"] },
//   { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
//   { id: "003", likes: 8, tags: ["css", "react"] },
//   { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
// ];

// const getTags = (tweets) =>
//   tweets.reduce((allTags, tweet) => {
//     allTags.push(...tweet.tags);

//     return allTags;
//   }, []);

// const tags = getTags(tweets);
// console.log(tags);

// –í–∏–Ω–µ—Å–µ–º–æ callback-—Ñ—É–Ω–∫—Ü—ñ—é –æ–∫—Ä–µ–º–æ, –∞ –≤ reduc–µ –ø–µ—Ä–µ–¥–∞–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—ó.
// –¶–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞, —è–∫—â–æ callback-—Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å–∏—Ç—å –≤–µ–ª–∏–∫–∞.

// –Ø–∫—â–æ –≤ –æ–±'—î–∫—Ç—ñ-–∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ acc –≤—ñ–¥—Å—É—Ç–Ω—è —Å–≤–æ—è –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –∑ –∫–ª—é—á–µ–º tag,
// —Ç–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó —ñ –∑–∞–ø–∏—Å—É—î–º–æ —ó–π –∑–Ω–∞—á–µ–Ω–Ω—è 0.
// –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –∑–±—ñ–ª—å—à—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ 1.
// const getTagStats = (acc, tag) => {
//   if (!acc.hasOwnProperty(tag)) {
//     acc[tag] = 0;
//   }

//   acc[tag] += 1;

//   return acc;
// };

// –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ - —Ü–µ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç {}
// const countTags = (tags) =>
//   tags.reduce((acc, tag) => {
//     if (!acc.hasOwnProperty(tag)) {
//       acc[tag] = 0;
//     }

//     acc[tag] += 1;

//     return acc;
//   }, {});

// const tagCount = countTags(tags);
// console.log(tagCount);

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è sort
// const scores = [61, 19];
// console.log([...scores]);
// const ascendingScores = [...scores].sort((a, b) => {
//   console.log(a, b);

//   return a - b;
// });
// console.log(ascendingScores); // [19, 35, 56, 61, 74, 92]

// const students = [
//   { name: "–ú–∞–Ω–≥–æ", score: 83 },
//   { name: "–ü–æ–ª—ñ", score: 59 },
//   { name: "–ê—è–∫—Å", score: 37 },
//   { name: "–ö—ñ–≤—ñ", score: 94 },
// ];

// const inAscendingScoreOrder = students.sort((firstStudent, secondStudent) => firstStudent.score - secondStudent.score);

// const inDescendingScoreOrder = students.sort((firstStudent, secondStudent) => secondStudent.score - firstStudent.score);

// const inAlphabeticalOrder = students.sort((firstStudent, secondStudent) => firstStudent.name.localeCompare(secondStudent.name));

// const users = [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male",
//     age: 37,
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female",
//     age: 34,
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male",
//     age: 24,
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female",
//     age: 21,
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     gender: "male",
//     age: 27,
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     gender: "male",
//     age: 38,
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female",
//     age: 39,
//   },
// ];
// –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getUsersWithFriend(users, friendName) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —É —è–∫–∏—Ö —î –æ–¥–∏–Ω —Å–ø—ñ–ª—å–Ω–∏–π –¥—Ä—É–≥ –∑ —ñ–º'—è–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ friendName. –ú–∞—Å–∏–≤ –¥—Ä—É–∑—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ friends.
// Change code below this line
// const getUsersWithFriend = (users, friendName) => {
//   return users.filter((user) => user.friends.includes(friendName));
// };
// Change code above this line

// const result = getUsersWithFriend(users, "Briana Decker");

// const uniqueCourses = allCourses.filter((course, index, array) => {
//   console.log(array);
//   console.log(array.indexOf(course) === index);
//   return array.indexOf(course) === index
// });

// 25. –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getFriends(users) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ –¥—Ä—É–∑—ñ–≤ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å friends). –£ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ –¥—Ä—É–∑—ñ, –∑—Ä–æ–±–∏ —Ç–∞–∫, —â–æ–± –º–∞—Å–∏–≤, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, –Ω–µ –º—ñ—Å—Ç–∏–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å.
// const getFriends = (users) => {
//     return users.flatMap((user) => user.friends).filter((friend, index, array) => array.indexOf(friend) === index);

// };
// console.log(getFriends(users));

//  4/47 –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getSortedFriends(users) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–º–µ–Ω –¥—Ä—É–∑—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å friends), –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º.
const users = [
  {
    name: "Moore Hensley",
    email: "moorehensley@indexia.com",
    eyeColor: "blue",
    friends: ["Sharron Pace"],
    isActive: false,
    balance: 2811,
    gender: "male",
  },
  {
    name: "Sharlene Bush",
    email: "sharlenebush@tubesys.com",
    eyeColor: "blue",
    friends: ["Briana Decker", "Sharron Pace"],
    isActive: true,
    balance: 3821,
    gender: "female",
  },
  {
    name: "Ross Vazquez",
    email: "rossvazquez@xinware.com",
    eyeColor: "green",
    friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
    isActive: false,
    balance: 3793,
    gender: "male",
  },
  {
    name: "Elma Head",
    email: "elmahead@omatom.com",
    eyeColor: "green",
    friends: ["Goldie Gentry", "Aisha Tran"],
    isActive: true,
    balance: 2278,
    gender: "female",
  },
  {
    name: "Carey Barr",
    email: "careybarr@nurali.com",
    eyeColor: "blue",
    friends: ["Jordan Sampson", "Eddie Strong", "Adrian Cross"],
    isActive: true,
    balance: 3951,
    gender: "male",
  },
  {
    name: "Blackburn Dotson",
    email: "blackburndotson@furnigeer.com",
    eyeColor: "brown",
    friends: ["Jacklyn Lucas", "Linda Chapman", "Adrian Cross", "Solomon Fokes"],
    isActive: false,
    balance: 1498,
    gender: "male",
  },
  {
    name: "Sheree Anthony",
    email: "shereeanthony@kog.com",
    eyeColor: "brown",
    friends: ["Goldie Gentry", "Briana Decker"],
    isActive: true,
    balance: 2764,
    gender: "female",
  },
];
const getSortedFriends = (users) => {
  return users
    .flatMap((user) => user.friends)
    .sort((prev, next) => prev.localeCompare(next))
    .filter((friend, index, array) => array.indexOf(friend) === index);
};

// console.log(getSortedFriends(users));

// 4/48 –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getTotalBalanceByGender(users, gender) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å balance), —Å—Ç–∞—Ç—å —è–∫–∏—Ö (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å gender) –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ gender.
const getTotalBalanceByGender = (users, gender) => {
  return users
    .filter((user) => user.gender === gender)
    .reduce((total, user) => {
      return total + user.balance;
    }, 0);
};

// console.log(getTotalBalanceByGender(users, "male"));
// console.log(getTotalBalanceByGender(users, "female"));
